// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateBillData, CreateBillErrors, CreateBillResponses, CreateProductData, CreateProductErrors, CreateProductResponses, CreateTableData, CreateTableErrors, CreateTableResponses, DeleteBillData, DeleteBillErrors, DeleteBillResponses, DeleteProductData, DeleteProductErrors, DeleteProductResponses, DeleteTableData, DeleteTableErrors, DeleteTableResponses, GetAllBillsData, GetAllBillsErrors, GetAllBillsResponses, GetAllProductsData, GetAllProductsErrors, GetAllProductsResponses, GetAllTablesData, GetAllTablesErrors, GetAllTablesResponses, GetBillByIdData, GetBillByIdErrors, GetBillByIdResponses, GetProductByIdData, GetProductByIdErrors, GetProductByIdResponses, GetTableByIdData, GetTableByIdErrors, GetTableByIdResponses, SplitBillData, SplitBillErrors, SplitBillResponses, UpdateBillData, UpdateBillErrors, UpdateBillResponses, UpdateProductData, UpdateProductErrors, UpdateProductResponses, UpdateTableData, UpdateTableErrors, UpdateTableResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all bills
 */
export const getAllBills = <ThrowOnError extends boolean = false>(options?: Options<GetAllBillsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllBillsResponses, GetAllBillsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/bills',
        ...options
    });
};

/**
 * Create new bill
 */
export const createBill = <ThrowOnError extends boolean = false>(options: Options<CreateBillData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateBillResponses, CreateBillErrors, ThrowOnError>({
        responseType: 'json',
        url: '/bills',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific bill
 */
export const deleteBill = <ThrowOnError extends boolean = false>(options: Options<DeleteBillData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBillResponses, DeleteBillErrors, ThrowOnError>({
        url: '/bills/{billId}',
        ...options
    });
};

/**
 * Fetch the bill information for a given ID
 */
export const getBillById = <ThrowOnError extends boolean = false>(options: Options<GetBillByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBillByIdResponses, GetBillByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/bills/{billId}',
        ...options
    });
};

/**
 * Update details of a specific bill
 */
export const updateBill = <ThrowOnError extends boolean = false>(options: Options<UpdateBillData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateBillResponses, UpdateBillErrors, ThrowOnError>({
        responseType: 'json',
        url: '/bills/{billId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Split a bill into multiple sub-bills
 */
export const splitBill = <ThrowOnError extends boolean = false>(options: Options<SplitBillData, ThrowOnError>) => {
    return (options.client ?? client).post<SplitBillResponses, SplitBillErrors, ThrowOnError>({
        responseType: 'json',
        url: '/bills/{billId}/split',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all products
 */
export const getAllProducts = <ThrowOnError extends boolean = false>(options?: Options<GetAllProductsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllProductsResponses, GetAllProductsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products',
        ...options
    });
};

/**
 * Create new product
 */
export const createProduct = <ThrowOnError extends boolean = false>(options: Options<CreateProductData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateProductResponses, CreateProductErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific product
 */
export const deleteProduct = <ThrowOnError extends boolean = false>(options: Options<DeleteProductData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProductResponses, DeleteProductErrors, ThrowOnError>({
        url: '/products/{productId}',
        ...options
    });
};

/**
 * Fetch the product information for a given ID
 */
export const getProductById = <ThrowOnError extends boolean = false>(options: Options<GetProductByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProductByIdResponses, GetProductByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{productId}',
        ...options
    });
};

/**
 * Update details of a specific product
 */
export const updateProduct = <ThrowOnError extends boolean = false>(options: Options<UpdateProductData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateProductResponses, UpdateProductErrors, ThrowOnError>({
        responseType: 'json',
        url: '/products/{productId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all tables
 */
export const getAllTables = <ThrowOnError extends boolean = false>(options?: Options<GetAllTablesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTablesResponses, GetAllTablesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/tables',
        ...options
    });
};

/**
 * Create new table
 */
export const createTable = <ThrowOnError extends boolean = false>(options: Options<CreateTableData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTableResponses, CreateTableErrors, ThrowOnError>({
        responseType: 'json',
        url: '/tables',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific table
 */
export const deleteTable = <ThrowOnError extends boolean = false>(options: Options<DeleteTableData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTableResponses, DeleteTableErrors, ThrowOnError>({
        url: '/tables/{tableId}',
        ...options
    });
};

/**
 * Fetch the table information for a given ID
 */
export const getTableById = <ThrowOnError extends boolean = false>(options: Options<GetTableByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTableByIdResponses, GetTableByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/tables/{tableId}',
        ...options
    });
};

/**
 * Update details of a specific table
 */
export const updateTable = <ThrowOnError extends boolean = false>(options: Options<UpdateTableData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateTableResponses, UpdateTableErrors, ThrowOnError>({
        responseType: 'json',
        url: '/tables/{tableId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
